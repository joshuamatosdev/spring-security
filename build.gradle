plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'org.springframework.boot:spring-boot-docker-compose'

    implementation 'org.jetbrains:annotations:24.1.0'

    runtimeOnly 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
}

tasks.named('test') {
    useJUnitPlatform()
}

def getYarnPathMacOS() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'which', 'yarn'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

tasks.register('buildFullStackApp') {
    group = 'frontend'
    description = 'Builds the frontend application and copies the output to the backend.'

    doLast {
        exec {
            workingDir = file('frontend')
            commandLine yarnPathMacOS, 'install'
        }

        exec {
            workingDir = file('frontend')
            commandLine yarnPathMacOS, 'run', 'build'
        }

        copy {
            from 'frontend/dist'
            into 'src/main/resources/static'
        }

        println 'Frontend build completed'
    }
}

build {
    dependsOn("buildFullStackApp")
}

bootRun {
    dependsOn("buildFullStackApp")
}

jar {
    dependsOn("buildFullStackApp")
}